generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  // Uses connection pooling
  url = env("POSTGRES_PRISMA_URL")
 directUrl = env("POSTGRES_URL_NON_POOLING")
  schemas = ["base", "hotdeals"]
}

model CartItem {
  id          Int         @id @default(autoincrement())
  created_at  DateTime    @default(now()) @db.Timestamptz(6)
  updated_at  DateTime    @updatedAt @db.Timestamptz(6)
  quantity    Int
  product     PlantProduct     @relation(fields: [product_id], references: [id])
  product_id  Int
  user        User        @relation(fields: [user_id], references: [id])
  user_id     Int

  @@map("cart_items")
  @@schema("base")
}

model OrderItem {
  id           Int       @id @default(autoincrement())
  quantity Int
  product_id  Int
  order_id  Int
  product   PlantProduct     @relation(fields: [product_id], references: [id])
  order   Order         @relation(fields: [order_id], references: [id])

 @@map("order_items")
 @@schema("base")

}



model OrderStatus {
  id     Int      @id @default(autoincrement())
  name   String   @db.VarChar(60)
  order  Order[]

  @@map("order_status")
  @@schema("base")
}

model PaymentStatus {
  id     Int      @id @default(autoincrement())
  name   String   @db.VarChar(60)
  status OrderPayments[]
  @@map("payment_status")
  @@schema("base")
}


model Order {
  id             Int              @id @default(autoincrement())
  created_at     DateTime         @default(now()) @db.Timestamptz(6)
  updated_at    DateTime          @updatedAt @db.Timestamptz(6)
  total_price    Decimal          @db.Decimal(10, 2)
  payment_id     Int
  user_id        Int
  status_id      Int
  payment        OrderPayments    @relation(fields: [payment_id], references: [id])
  order_status   OrderStatus    @relation(fields: [status_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users          User            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order OrderItem[]


  @@map("orders")
  @@schema("base")
}

model OrderPayments {
  id   Int   @id @default(autoincrement())
  created_at     DateTime         @default(now()) @db.Timestamptz(6)
  updated_at     DateTime         @updatedAt @db.Timestamptz(6)
  payment   Order[]
  status_id      Int
  status PaymentStatus @relation(fields: [status_id], references: [id])

 @@map("order_payments")
 @@schema("base")
}




model ProductCategory {
  id   Int   @id @default(autoincrement())
  name String @db.VarChar(100)
  product PlantProduct[]
   @@map("product_categories")
   @@schema("base")
}


model PlantProduct {
  id                 Int                  @id @default(autoincrement())
  title              String               @db.VarChar(50)
  price              Decimal              @db.Decimal(10, 2)
  descr              String
  slug               String               @db.VarChar(50)
  product_categories ProductCategory[]
  cart CartItem[]
  img_url ProductImgURL[]
  product OrderItem[]

  @@map("products")
  @@schema("base")
}

model UserDetail {
  id         Int     @id @default(autoincrement())
  first_name String? @db.VarChar(50)
  last_name  String? @db.VarChar(50)
  address    String? @db.VarChar(100)
  city       String? @db.VarChar(100)
  zip_code   String? @db.VarChar(10)
  country    String? @db.VarChar(100)
  user_id    Int? @unique
  users      User?  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_details")
  @@schema("base")
}

model UserRole {
  id        Int     @id @default(autoincrement())
  role_name String  @db.VarChar(30)
  users     User[]

  @@map("user_roles")
  @@schema("base")
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique @db.VarChar(30)
  username      String          @db.VarChar(30)
  role_id       Int?
  created_at     DateTime        @default(now()) @db.Timestamptz(6)
  cart_items    CartItem[]
  orders        Order[]
  user_details  UserDetail?
  user_roles    UserRole?       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  users_payment UserPayment[]
  user_sessions UserSession[]
  user_id_external String       @unique


  @@unique([email, username])
  @@map("users")
  @@schema("base")
}

model UserPayment {
  id           Int       @id @default(autoincrement())
  user_id      Int
  card_type_id Int?
  cardnumber   Int?
  expire_at    DateTime? @db.Date
  users        User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("users_payment")
  @@schema("base")
}


model ProductImgURL {
   id  Int       @id @default(autoincrement())
   url String?
   product_id Int
   product PlantProduct @relation(fields: [product_id], references: [id])
 @@map("product_img_urls")
 @@schema("base")
}


model UserSession {
  id           Int       @id @default(autoincrement())
  token        String
  expire_at    DateTime   @default(dbgenerated("now() + interval '24 hours'"))
  user_id      Int
  users        User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_sessions")
  @@schema("base")
}
