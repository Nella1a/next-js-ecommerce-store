generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CartItem {
  id              Int               @id @default(autoincrement())
  product_id      Int
  quantity        Int?
  created_at      DateTime?         @default(now()) @db.Timestamptz(6)
  products        Product          @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  carts_and_items CartAndItem[]

  @@map("cart_items")
}

model Cart {
  id              Int               @id @default(autoincrement())
  session_id      Int?
  created_at      DateTime?         @default(now()) @db.Timestamptz(6)
  user_sessions   UserSession?    @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  carts_and_items CartAndItem[]

  @@map("Cart")
}

model CartAndItem {
  cart_id      Int
  cart_item_id Int
  carts        Cart      @relation(fields: [cart_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  cart_items   CartItem @relation(fields: [cart_item_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([cart_id, cart_item_id], map: "carts_and_items_pk")
  @@map("carts_and_items")
}

model Category {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(60)
  product_categories ProductCategory[]

  @@map("categories")
}

model Migration {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(255)
  created_at DateTime @db.Timestamp(6)

  @@map("migrations")
}

model OrderStatus {
  id     Int      @id @default(autoincrement())
  name   String   @db.VarChar(60)
  orders Order[]

  @@map("order_status")
}

model Order {
  id             Int              @id @default(autoincrement())
  created_at     DateTime         @default(now()) @db.Timestamptz(6)
  quantity       Int
  user_id        Int
  total_price    Decimal          @db.Decimal(10, 2)
  status_id      Int?
  order_status   OrderStatus?    @relation(fields: [status_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users          User            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product_orders ProductOrder[]

  @@map("orders")
}

model ProductCategory {
  product_id  Int
  category_id Int
  categories  Category @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  products    Product   @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([product_id, category_id], map: "product_categories_pk")
  @@map("product_categories")
}

model ProductOrder {
  product_id Int
  order_id   Int
  orders     Order   @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  products   Product @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([product_id, order_id], map: "product_orders_pk")
  @@map("product_orders")
}

model Product {
  id                 Int                  @id @default(autoincrement())
  title              String               @db.VarChar(50)
  price              Decimal              @db.Decimal(10,2)
  descr              String

  slug               String               @unique @db.VarChar(50)
  cart_items         CartItem[]
  product_categories ProductCategory[]
  product_orders     ProductOrder[]

  @@map("products")
}

model ShippingAddress {
  id           Int     @id @default(autoincrement())
  user_id      Int?
  address_line String? @db.VarChar(255)
  city         String? @db.VarChar(255)
  zip_code     String? @db.VarChar(255)
  country      String? @db.VarChar(255)
  company      String? @db.VarChar(255)
  users        User?  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("shipping_address")
}

model UserRole {
  id        Int     @id @default(autoincrement())
  role_name String  @db.VarChar(30)
  users     User[]

  @@map("user_roles")
}

model UserSession {
  id               Int      @id @default(autoincrement())
  token            String   @unique @db.VarChar(90)
  expire_at           DateTime @default(dbgenerated("(now() + '12:00:00'::interval)")) @db.Timestamp(6)
  user_id          Int?
  carts            Cart[]
  users            User?   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

@@map("user_sessions")
}

model User {
  id               Int                @id @default(autoincrement())
  created_at       DateTime           @default(now()) @db.Timestamptz(6)
  email            String             @unique @db.VarChar(30)
  password_hash    String             @db.VarChar(60)
  username         String?            @db.VarChar(30)
  first_name       String?            @db.VarChar(50)
  last_name        String?            @db.VarChar(50)
  role_id          Int?
  orders           Order[]
  shipping_address ShippingAddress[]
  user_sessions    UserSession[]
  user_roles       UserRole?        @relation(fields: [role_id], references: [id], onDelete: Cascade)
  users_payment    UserPayment[]

  @@map("users")
}

model UserPayment {
  id           Int       @id @default(autoincrement())
  user_id      Int
  card_type_id Int?
  cardnumber   Int?
  expire_at  DateTime? @db.Date
  users        User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

@@map("users_payment")
}
