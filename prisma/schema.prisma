generator client {
  provider = "prisma-client-js"
}

datasource db {
 // provider = "postgresql"
 // url      = env("DATABASE_URL")

   provider = "postgresql"
  // Uses connection pooling
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model CartItem {
  id         Int      @id @default(autoincrement())
  product_id Int
  cart_id    Int?    @unique
  carts      Cart?   @relation(fields: [cart_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  products   Product @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("cart_items")
}

model Cart {
  id          Int         @id @default(autoincrement())
  created_at  DateTime    @default(now()) @db.Timestamptz(6)
  modified_at DateTime    @default(now()) @db.Timestamptz(6)
  user_id     Int?        @unique
  total_price Decimal?    @db.Decimal(10, 2)
  is_order    String?     @db.Bit(1)
  quantity    Int?
  cart_items  CartItem?
  users       User?      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("carts")
}

model Category {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(60)
  product_categories ProductCategory[]

  @@map("categories")
}

model OrderStatus {
  id     Int      @id @default(autoincrement())
  name   String   @db.VarChar(60)
  orders Order[]

  @@map("order_status")
}

model Order {
  id             Int              @id @default(autoincrement())
  created_at     DateTime         @default(now()) @db.Timestamptz(6)
  quantity       Int
  user_id        Int
  total_price    Decimal          @db.Decimal(10, 2)
  status_id      Int?
  modified_at    DateTime        @default(now()) @db.Timestamptz(6)
  order_status   OrderStatus?    @relation(fields: [status_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users          User            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product_orders ProductOrder[]

  @@map("orders")
}

model ProductCategory {
  product_id  Int
  category_id Int
  categories  Category @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  products    Product   @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([product_id, category_id], map: "product_categories_pk")

  @@map("product_categories")
}

model ProductOrder {
  product_id Int
  order_id   Int
  orders     Order   @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  products   Product @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([product_id, order_id], map: "product_orders_pk")

  @@map("product_orders")
}

model Product {
  id                 Int                  @id @default(autoincrement())
  title              String               @db.VarChar(50)
  price              Decimal              @db.Decimal(10, 2)
  descr              String
  slug               String               @db.VarChar(50)
  cart_items         CartItem[]
  product_categories ProductCategory[]
  product_orders     ProductOrder[]

  @@map("products")
}

model UserDetail {
  id         Int     @id @default(autoincrement())
  first_name String? @db.VarChar(50)
  last_name  String? @db.VarChar(50)
  address    String? @db.VarChar(100)
  city       String? @db.VarChar(100)
  zip_code   String? @db.VarChar(10)
  country    String? @db.VarChar(100)
  user_id    Int? @unique
  users      User?  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_details")
}

model UserRole {
  id        Int     @id @default(autoincrement())
  role_name String  @db.VarChar(30)
  users     User[]

  @@map("user_roles")
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique @db.VarChar(30)
  username      String          @db.VarChar(30)
  role_id       Int?
  created_at    DateTime        @default(now()) @db.Timestamptz(6)
  carts         Cart?
  orders        Order[]
  user_details  UserDetail?
  user_roles    UserRole?       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  users_payment UserPayment[]
  user_sessions UserSession[]
  user_id_external String       @unique


  @@unique([email, username])

  @@map("users")
}

model UserPayment {
  id           Int       @id @default(autoincrement())
  user_id      Int
  card_type_id Int?
  cardnumber   Int?
  expire_at    DateTime? @db.Date
  users        User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("users_payment")
}

model UserSession {
  id           Int       @id @default(autoincrement())
  token        String
  expire_at    DateTime   @default(dbgenerated("now() + interval '24 hours'"))
  user_id      Int
  users        User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}
